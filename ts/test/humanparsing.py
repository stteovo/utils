import cv2, os
import numpy as np

from lollipop.parsing.human_parsing.HumanParsing import HumanParsing
from lollipop import FacePoint, FaceRotate
from lollipop.pose.pose_est.PoseEstimate import PoseEstimate

def test_human_parsing(img):
    human_parsing = HumanParsing()
    print(f"hp模型所在设备：{human_parsing.model.device}")

    results = human_parsing.model.run(img, return_ori_size=True)
    img_vis = human_parsing.model.visualize(img, results)

    return img_vis

def test_face_points(img):
    face_points_model = FacePoint(True)

    face_points = face_points_model(img)
    face_boxes = face_points_model.get_box(img)
    assert len(face_points) > 0, "未检测到人脸"

    '''可视化'''
    img_vis = np.copy(img)
    face_points_model.draw_point(img_vis, face_points, (255, 0, 0))
    face_points_model.draw_box(img_vis, face_boxes)

    '''人脸对齐算法测试'''
    # 2000x2000证件照换装女人脸
    model_face_points = np.array([
        [783.89484, 583.9491], [816.55615, 546.54504], [859.6966, 543.5932], [902.07153, 553.3123],
        [941.8617, 568.1128], [935.48083, 592.27124], [897.57587, 582.20496], [858.0957, 574.9086],
        [819.4983, 575.35846], [1220.3755, 585.0259], [1187.7354, 546.707], [1144.1444, 543.9402],
        [1101.3777, 553.9584], [1061.4827, 569.261], [1067.3607, 593.2152], [1105.4487, 582.7002],
        [1145.2561, 575.0622], [1184.3625, 575.72473], [823.19354, 644.02814], [847.51855, 627.4341],
        [878.99445, 623.41254], [909.5394, 633.4704], [930.75037, 656.844], [901.77, 661.4524],
        [872.0742, 664.0803], [844.5733, 658.15356], [876.6177, 643.05304], [857.4987, 639.7884],
        [863.9334, 623.4725], [880.2967, 616.53564], [896.5414, 623.2974], [903.30164, 639.48804],
        [896.59265, 655.7064], [880.331, 662.6848], [864.0476, 655.8994], [880.41364, 639.5713],
        [1178.0679, 644.0517], [1153.49, 627.40656], [1121.873, 623.3877], [1091.2727, 633.66846],
        [1070.2628, 657.4134], [1099.2738, 661.6832], [1128.9894, 664.02264], [1156.5565, 658.0687],
        [1125.0929, 643.6279], [1143.5626, 639.5685], [1136.9277, 623.27057], [1120.4222, 616.4833],
        [1104.2129, 623.47015], [1097.6346, 639.7871], [1104.5469, 655.9691], [1120.9369, 662.7859],
        [1137.1874, 655.79175], [1120.5863, 639.6045], [1000.92883, 632.15393], [1000.83606, 679.03485],
        [1000.5149, 726.1559], [1000.3596, 772.93726], [999.2514, 817.929], [962.28174, 646.05164],
        [959.9642, 683.00824], [957.6466, 719.96484], [955.3291, 756.9215], [939.3041, 794.7681],
        [957.0123, 818.0884], [970.85254, 803.34644], [1039.3586, 646.4761], [1041.2085, 683.3793],
        [1043.0585, 720.2825], [1044.9083, 757.18567], [1060.7471, 795.05865], [1042.403, 817.91174],
        [1028.7606, 803.2095], [916.8518, 901.3835], [928.5503, 890.7421], [942.39215, 880.44006],
        [957.5847, 870.8723], [975.082, 863.8723], [998.2411, 869.04913], [1021.6182, 863.31976],
        [1039.7057, 869.9314], [1055.5436, 879.3129], [1070.0819, 889.7669], [1082.3655, 901.1618],
        [1072.4849, 913.1111], [1062.6042, 925.06036], [1048.719, 933.4947], [1034.8339, 941.92896],
        [1016.7963, 944.5863], [998.75885, 947.24365], [980.9263, 944.6554], [963.09375, 942.0672],
        [949.55725, 933.59656], [936.0207, 925.12585], [926.4363, 913.25464], [931.3114, 900.4813],
        [953.3179, 897.5026], [976.2134, 895.4988], [998.67145, 896.9776], [1021.4244, 894.99023],
        [1045.1316, 897.02246], [1067.6736, 900.37213], [1045.1066, 899.59595], [1021.67084, 899.7654],
        [998.8126, 901.38617], [976.294, 899.9837], [953.35724, 899.9043], [1000.7834, 981.5683],
        [1000.67926, 1015.85706], [743.10016, 625.43304], [741.7405, 659.896], [744.10345, 694.0974],
        [749.3905, 728.2592], [756.45044, 762.1128], [764.8385, 795.21136], [773.65845, 828.03204],
        [783.77124, 860.6669], [796.8201, 892.49457], [812.60925, 922.0985], [831.41516, 949.7827],
        [853.04785, 975.2554], [877.1552, 998.30255], [903.53516, 1019.2714], [932.6179, 1036.6105],
        [965.3721, 1047.0498], [1000.5751, 1050.1458], [1035.5001, 1046.876], [1067.6248, 1036.3297],
        [1095.9728, 1018.86975], [1121.8073, 997.838], [1145.8208, 974.9463], [1167.7412, 949.89014],
        [1186.9728, 922.5956], [1203.2179, 893.18677], [1216.1216, 861.2146], [1225.9255, 828.4302],
        [1234.7935, 795.8827], [1243.9502, 763.1043], [1252.3063, 729.80066], [1258.5393, 695.9542],
        [1261.5474, 662.08093], [1261.749, 628.07196], [1257.5868, 582.682], [1251.936, 545.9707],
        [1244.8845, 512.3642], [1234.1998, 478.45517], [1218.8602, 444.62396], [1199.6107, 414.27444],
        [1176.6627, 388.46454], [1148.2974, 366.7942], [1116.7229, 350.4151], [1082.1722, 339.46707],
        [1045.2542, 333.65427], [1008.5155, 331.7569], [969.6415, 332.4006], [932.96405, 337.26224],
        [896.99585, 346.49924], [864.19666, 361.42395], [834.49915, 382.01627], [809.2863, 407.65494],
        [789.0541, 438.80588], [772.34534, 472.7188], [759.9337, 506.6017], [749.4236, 542.33093],
        [740.9252, 577.45807], [612.22205, 591.89575], [619.43256, 535.25665], [626.643, 478.61755],
        [643.87134, 427.1625], [661.0997, 375.70752], [688.8764, 328.05884], [716.6532, 280.41016],
        [755.2718, 242.39246], [793.8904, 204.37476], [843.04224, 181.14113], [892.1941, 157.90752],
        [948.002, 150.97374], [1003.80994, 144.03996], [1059.6902, 153.33972], [1115.5704, 162.63948],
        [1162.5424, 188.96086], [1209.5143, 215.28224], [1245.6885, 254.45685], [1281.8627, 293.63147],
        [1307.1217, 340.44467], [1332.3809, 387.2579], [1346.6854, 439.74194], [1360.99, 492.22598],
        [1364.5428, 547.99854], [1368.096, 603.7711], [1006.4701, 574.3554], [1007.4452, 516.72705],
        [1008.4204, 459.0988], [1008.4679, 395.42786]
    ])
    obj_face_rotate = FaceRotate(model_image=[model_face_points, [2000, 2000]])
    # obj_face_rotate = FaceRotate(model_image="./test_woman_idphoto")

    img_rotated = obj_face_rotate(img, src_fp=face_points[1])

    return img_vis, img_rotated

def test_pose_points(img):
    '''得到骨骼点结果'''
    pose_model = PoseEstimate()
    contour_results = pose_model(img)
    if len(contour_results['pose_point']) == 0:
        print(f'未检测到骨骼点!!!')

    '''可视化'''
    img_pose_pts, img_contour_pts = pose_model.display(img, contour_results)
    return img_pose_pts, img_contour_pts


if __name__ == '__main__':
    img_path = "/data_ssd/mine/utils/ts/test/img_person_test.jpg"
    assert os.path.exists(img_path), f"图像路径不存在{img_path}"
    image = cv2.imread(img_path, -1)

    '''依次展示各个instance mask'''
    # test_human_parsing(image)

    '''测试人脸点及其对齐算法'''
    # img_face_pts, img_rotated = test_face_points(image)

    '''测试骨骼点'''
    img_pose_pts, img_contour_pts = test_pose_points(image)

    pass